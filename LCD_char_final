// **************************************************************************
//
//               Demo program for labs
//
// Subject:      Computer Architectures and Parallel systems
// Author:       Petr Olivka, petr.olivka@vsb.cz, 08/2016
// Organization: Department of Computer Science, FEECS,
//               VSB-Technical University of Ostrava, CZ
//
// File:         Main program for LCD module
//
// **************************************************************************

#include "mbed.h"
#include "lcd_lib.h"
///ZDE
#include "font24x40_lsb.h"


// Serial line for printf output
Serial pc(USBTX, USBRX);

// two dimensional array with fixed size ifont
/// NEBUDE TREBA
///extern uint8_t g_font8x8[256][8];

///ZDE vlozit tridy pro graficke elementy
#define WIDTH  35
#define HEIGTH 35

struct Point2D
{
    int32_t x, y;
};

struct RGB
{
    uint8_t r, g, b;
};

class GraphElement
{
public:
    // foreground and background color
    RGB fg_color, bg_color;

    // constructor
    GraphElement( RGB t_fg_color, RGB t_bg_color ) :
        fg_color( t_fg_color ), bg_color( t_bg_color ) {}

    // ONLY ONE INTERFACE WITH LCD HARDWARE!!!
    void drawPixel( int32_t t_x, int32_t t_y ) { lcd_put_pixel( t_x, t_y, convert_RGB888_to_RGB565( fg_color ) ); }

    // Draw graphics element
    virtual void draw() = 0;

    // Hide graphics element
    virtual void hide() { swap_fg_bg_color(); draw(); swap_fg_bg_color(); }
private:
    // swap foreground and backgroud colors
    void swap_fg_bg_color() { RGB l_tmp = fg_color; fg_color = bg_color; bg_color = l_tmp; }

    // IMPLEMENT!!!
    // conversion of 24-bit RGB color into 16-bit color format
    int convert_RGB888_to_RGB565(RGB t_color)
        {
        	union URGB { struct { int b : 5; int g : 6; int r : 5; }; short rgb565; } urgb;
        	urgb.r = (t_color.r >> 3) & 0x1F;
        	urgb.g = (t_color.g >> 2) & 0x3F;
        	urgb.b = (t_color.b >> 3) & 0x1F;
        	return urgb.rgb565;
        }
};

class Character : public GraphElement
{
public:
    // position of character
    Point2D pos;
    // character
    char character;

    Character( Point2D t_pos, char t_char, RGB t_fg, RGB t_bg ) :
      pos( t_pos ), character( t_char ), GraphElement( t_fg, t_bg ) {};

    void draw()
    {
    	for(int osaY = 0; osaY < WIDTH; osaY++)
    	{
    		int radek = font[character] [osaY];
    		for(int osaX = HEIGTH; osaX > 0 ; osaX--)
    		{
    			if(radek & (1 << osaX))
    				drawPixel((pos.x + osaX) + (-1) , pos.y + osaY);
    		}
    	}
    }
};

static unsigned long int next = 1;

int rand(void) // RAND_MAX assumed to be 32767
{
    next = next * 1103515245 + 12345;
    return (unsigned int)(next/65536) % 32768;
}

void srand(unsigned int seed)
{
    next = seed;
}

int main()
{
	// Serial line initialization
	//g_pc.baud(115200);

	lcd_init();				// LCD initialization

	lcd_clear();			// LCD clear screen

	RGB l_color_white = {255,255,255};
	RGB l_color_black = {0,0,0};
	RGB l_color_red = {255,0,0};
	RGB l_color_blue = {0,0,255};
	RGB l_color_green = {0,255,0};
	RGB l_color_cyan =  {0,255,255};
	RGB l_color_violet = {255,0 ,255};
	RGB l_color_yellow = {255,255,0};

	RGB barvy[7] = {l_color_white, l_color_red, l_color_blue, l_color_cyan, l_color_green, l_color_violet, l_color_yellow};

	while(1)
	{
		for(int i = 32; i < 127; i++ )
		{
			int randomX = rand() % (270 * (1)) + 10;
			int randomY = rand() % 190 + 10;
			int randomN = rand() % 7;

			Character ch1({randomX, randomY}, i, barvy[randomN], l_color_black);
			ch1.draw();
			wait_ms(250);
			ch1.hide();
		}
	}


	return 0;
}
